//
//  TSCountLabel.m
//  WinTreasure
//
//  Created by Apple on 16/6/16.
//  Copyright © 2016年 i-mybest. All rights reserved.
//

#import "TSCountLabel.h"

@interface TSCountLabel ()

@property (strong, nonatomic) NSString *valueString;
@property (strong, nonatomic) NSTimer *timer;
@property (nonatomic, assign) unsigned long resetValue;
@property (nonatomic, assign) unsigned long value;
@property (nonatomic, assign) double startTime;
@property (nonatomic, assign) BOOL running;

@end

@implementation TSCountLabel

- (instancetype)initWithFrame:(CGRect)frame {
    self = [super initWithFrame:frame];
    if (self) {
        [self commonInit];
    }
    return self;
}

- (id)initWithCoder:(NSCoder *)aDecoder {
    self = [super initWithCoder:aDecoder];
    if (self) {
        [self commonInit];
    }
    return self;
}

- (void)commonInit {
    self.valueString = @"";
    self.textAlignment = NSTextAlignmentCenter;
    self.font = [UIFont systemFontOfSize:25];
    self.countDirection = kCountDirectionDown;
    self.value = 0;
    self.startValue = 0;

}

#pragma mark - Setters

- (void)setValue:(unsigned long)value {
    _value = value;
    self.currentValue = _value;
    if (self.delegate && [self.delegate respondsToSelector:@selector(countdownDidStarted:)]) {
        [self.delegate countdownDidStarted:@(_value)];
    }
    [self updateDisplay];
}

- (void)setStartValue:(NSInteger)startValue {
    _startValue = startValue;
    self.resetValue = _startValue;
    [self setValue:startValue];
}

#pragma mark - Private

- (void)updateDisplay {
    if (self.countDirection == kCountDirectionDown && _value < 100) {
        [self stop];
        self.valueString = @"00:00:00";
        
        // Inform any delegates
        if (self.delegate && [self.delegate respondsToSelector:@selector(countdownDidEnd)]) {
            [self.delegate performSelector:@selector(countdownDidEnd)];
        }
    } else {

        self.valueString = [self timeFormattedStringForValue:_value];
    }
    
    self.text = self.valueString;
    
    [self setNeedsDisplay];
}

- (NSString *)timeFormattedStringForValue:(unsigned long)value {
    int msperhour = 3600000;
    int mspermin = 60000;
    
    int hrs = (int)value / msperhour;
    int mins = (value % msperhour) / mspermin;
    int secs = ((value % msperhour) % mspermin) / 1000;
    int frac = value % 1000 / 10;
    
    NSString *formattedString = @"";
    
    if (hrs == 0) {
        if (mins == 0) {
            formattedString = [NSString stringWithFormat:@"%02d:%02d:%02d",hrs, secs, frac];
        } else {
            formattedString = [NSString stringWithFormat:@"%02d:%02d:%02d", mins, secs, frac];
        }
    } else {
        formattedString = [NSString stringWithFormat:@"%02d:%02d:%02d:%02d", hrs, mins, secs, frac];
    }
    
    return formattedString;
}

- (void)clockDidTick:(NSTimer *)timer {
    double currentTime = CFAbsoluteTimeGetCurrent();
    double elapsedTime = currentTime - self.startTime;
    unsigned long milliSecs = (unsigned long)(elapsedTime * 1000);

    if (self.countDirection == kCountDirectionDown) {
        [self setValue:(_startValue - milliSecs)];
    } else {
        [self setValue:(_startValue + milliSecs)];
    }
}

- (void)start {
    if (self.running) return;
    
    self.startTime = CFAbsoluteTimeGetCurrent();
    
    self.running = YES;
    self.isRunning = self.running;
    
    self.timer = [NSTimer timerWithTimeInterval:0.02
                                              target:self
                                            selector:@selector(clockDidTick:)
                                            userInfo:nil repeats:YES];
    [[NSRunLoop mainRunLoop] addTimer:self.timer forMode:NSRunLoopCommonModes];
}

- (void)stop {
    if (self.timer) {
        [self.timer invalidate];
        self.timer = nil;
        
        _startValue = self.value;
    }
    
    self.running = NO;
    self.isRunning = self.running;
}

- (void)reset {
    [self stop];
    
    self.startValue = self.resetValue;
    [self setValue:self.resetValue];
}

- (void)updateApperance {
    [self setValue:_currentValue];
}

@end
